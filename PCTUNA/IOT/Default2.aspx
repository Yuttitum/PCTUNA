<%@ Page Title="" Language="vb" AutoEventWireup="false" MasterPageFile="~/Site.Master" CodeBehind="Default2.aspx.vb" Inherits="IOT.Default2" %>
<asp:Content ID="Content1" ContentPlaceHolderID="MainContent" runat="server">
    <script src="Scripts/progressbar.js"></script>
    <!--Reference the SignalR library. -->
    <script src="Scripts/jquery.signalR-2.2.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="signalr/hubs"></script>
    <!--Add script to update the page and send messages.--> 
    <script type="text/javascript">        
        $(function () {
            // Declare a proxy to reference the hub. 
            var chat = $.connection.chatHub;
            // Create a function that the hub can call to broadcast messages.
            chat.client.sendMessage = function (message) {
                // Html encode display name and message. 
                if (message == "Update") {
                    __doPostBack("<%=upOperationRate.UniqueID %>", "");
                }
            };
            $.connection.hub.start().done(function () {
                
            });
        });
        function operationRate(percentage) {
            var bar = new ProgressBar.Circle('#operationRate', {
                color: '#00FF00',
                trailColor: 'gray',
                // This has to be the same size as the maximum width to
                // prevent clipping
                strokeWidth: 15,
                trailWidth: 15,
                easing: 'easeInOut',
                duration: 1400,
                text: {
                    autoStyleContainer: false
                },
                from: { color: '#90EE90', width: 5 },
                to: { color: '#00FF00', width: 15 },
                // Set default step function for all animate calls
                step: function (state, circle) {
                    circle.path.setAttribute('stroke', state.color);
                    circle.path.setAttribute('stroke-width', state.width);

                    var value = Math.round(circle.value() * 100);
                    if (value === 0) {
                        circle.setText('');
                    } else {
                        circle.setText(value + "<span style='font-size:0.5em'>%<span>");
                    }

                }
            });
            bar.text.style.fontFamily = '"Raleway", Helvetica, sans-serif';
            bar.text.style.fontSize = '15vmin';

            bar.animate(percentage);  // Number from 0.0 to 1.0
        }
        function progress(percentage) {
            var bar = new ProgressBar.Circle('#progress', {
                color: '#0000ff',
                trailColor: 'gray',
                // This has to be the same size as the maximum width to
                // prevent clipping
                strokeWidth: 15,
                trailWidth: 15,
                easing: 'easeInOut',
                duration: 1400,
                text: {
                    autoStyleContainer: false
                },
                from: { color: '#add8e6', width: 5 },
                to: { color: '#0000ff', width: 15 },
                // Set default step function for all animate calls
                step: function (state, circle) {
                    circle.path.setAttribute('stroke', state.color);
                    circle.path.setAttribute('stroke-width', state.width);

                    var value = Math.round(circle.value() * 100);
                    if (value === 0) {
                        circle.setText('');
                    } else {
                        circle.setText(value + "<span style='font-size:0.5em'>%<span>");
                    }

                }
            });
            bar.text.style.fontFamily = '"Raleway", Helvetica, sans-serif';
            bar.text.style.fontSize = '15vmin';

            bar.animate(percentage);  // Number from 0.0 to 1.0
        }
        function forecast(percentage) {
            var bar = new ProgressBar.Circle('#forecast', {
                color: '#fa8072',
                trailColor: 'gray',
                // This has to be the same size as the maximum width to
                // prevent clipping
                strokeWidth: 15,
                trailWidth: 15,
                easing: 'easeInOut',
                duration: 1400,
                text: {
                    autoStyleContainer: false
                },
                from: { color: '#ffa07a', width: 5 },
                to: { color: '#fa8072', width: 15 },
                // Set default step function for all animate calls
                step: function (state, circle) {
                    circle.path.setAttribute('stroke', state.color);
                    circle.path.setAttribute('stroke-width', state.width);

                    var value = Math.round(circle.value() * 100);
                    if (value === 0) {
                        circle.setText('');
                    } else {
                        circle.setText(value + "<span style='font-size:0.5em'>%<span>");
                    }

                }
            });
            bar.text.style.fontFamily = '"Raleway", Helvetica, sans-serif';
            bar.text.style.fontSize = '15vmin';

            bar.animate(percentage);  // Number from 0.0 to 1.0
        }
    </script>
    <style>
        #container {
            margin: auto;
            text-align:center;
            position: relative;
            background-color:black;
        }        
        .table1{
            table-layout:fixed;
            width:100%;
            height:calc(100vh - 50px);
        }
        .table1 td{
            position:relative;
            text-align:center;
            font-size:5vmin;
            font-weight:bold;
            padding:2vmin;
        }
        .table1 td span{
            margin-top:2vmin;
        }
        .operationRateColor{
            color:#00FF00;
        }
        .progressColor{
            color:#0000ff;
        }
        .forecastColor{
            color:#fa8072;
        }
    </style>
    <table class="table1">
        <tr>
            <td>
                <asp:UpdatePanel ID="upOperationRate" runat="server" AssociatedUpdatePanelID="upOperationRate">            
                    <ContentTemplate>
                        <div>
                            <div id="operationRate"></div>
                        </div>         
                    </ContentTemplate>
                </asp:UpdatePanel>
                <span class ="operationRateColor">OP RATE</span>
            </td>
            <td>
                <asp:UpdatePanel ID="upProgress" runat="server" AssociatedUpdatePanelID="upProgress">            
                    <ContentTemplate>
                        <div>
                            <div id="progress"></div>
                        </div>         
                    </ContentTemplate>
                </asp:UpdatePanel>
                <span class ="progressColor">PROGRESS</span>
            </td>
            <td>
                <asp:UpdatePanel ID="upForecast" runat="server" AssociatedUpdatePanelID="upForecast">            
                    <ContentTemplate>
                        <div>
                            <div id="forecast"></div>
                        </div>         
                    </ContentTemplate>
                </asp:UpdatePanel>
                <span class ="forecastColor">FORECAST</span>
            </td>            
        </tr>
    </table>    
</asp:Content>
